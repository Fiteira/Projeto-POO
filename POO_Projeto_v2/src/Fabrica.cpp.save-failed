#include "Fabrica.h"

Fabrica::Fabrica(User *ut)
{
    //ctor
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    HORA = 0;
    Ut_Atual = ut;
    Add(ut);
}

Fabrica::~Fabrica()
{
    //dtor
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
}

bool Fabrica::Load(const string &ficheiro)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    NOME_EMPRESA = "Empresa da Minha Terra";
    HORA_INICIO = 8;
    HORA_FECHO = 16;
    VIZINHANCA_AVISO = 10;
    LARGURA = 50;
    COMPRIMENTO = 80;
    POS_MOTORES = new int[LARGURA * COMPRIMENTO];
    POS_SENSORES = new int[LARGURA * COMPRIMENTO];
    int tam = LARGURA * COMPRIMENTO;
    for (int i = 0; i < tam; i++)
    {
        POS_MOTORES[i] = -1;
        POS_SENSORES[i] = -1;
    }
    DEF_MCOMBUSTAO[0] = 0;
    DEF_MCOMBUSTAO[1] = 80;
    DEF_MCOMBUSTAO[2] = 81;
    DEF_MCOMBUSTAO[3] = 100;
    DEF_MCOMBUSTAO[4] = 101;
    DEF_MCOMBUSTAO[5] = 250;
    DEF_MCOMBUSTAO[6] = 10;
    DEF_MELETRICO[0] = 0;
    DEF_MELETRICO[1] = 80;
    DEF_MELETRICO[2] = 81;
    DEF_MELETRICO[3] = 100;
    DEF_MELETRICO[4] = 101;
    DEF_MELETRICO[5] = 500;
    DEF_MELETRICO[6] = 1;
    DEF_MINDUCAO[0] = 0;
    DEF_MINDUCAO[1] = 50;
    DEF_MINDUCAO[2] = 51;
    DEF_MINDUCAO[3] = 70;
    DEF_MINDUCAO[4] = 71;
    DEF_MINDUCAO[5] = 100;
    DEF_MINDUCAO[6] = 1;
    // COMPLETAR
    return false;
}

bool Fabrica::Ut_Atual_Existe()
{
    if (Ut_Atual)
        return true;
    cout << "A fabrica nao tem gestor" << endl;
    return false;
}

bool Fabrica::Add(User *ut)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoADICIONAR())
        {
            LUsers.push_back(ut);
            return true;
        }
    }
    return false;
}

bool Fabrica::Add(Motor *m)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoADICIONAR())
        {
            LMotores.push_back(m);
            return true;
        }
    }
    return false;
}

bool Fabrica::Rem_User(int id_ut)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoREMOVER())
        {
            // remove o user da fabrica
            User *U = Pesquisa_User(id_ut);
            if (U != NULL)
            {
                LUsers.remove(U);
                delete(U);
                return true;
            }
            cout << "User nao foi encontrado" << endl;
        }
    }
    return false;
}

bool Fabrica::Rem_Motor(int id_motor)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoREMOVER())
        {
            // remove o motor da fabrica
            Motor *M = Pesquisa_Motor(id_motor);
            if (M != NULL)
            {
                LMotores.remove(M);
                delete(M);
                return true;
            }
            cout << "Motor nao foi encontrado" << endl;
        }
    }
    return false;
}

void Fabrica::Listar(ostream &f)
{
    list<Motor *>::iterator it;
    for (it = LMotores.begin(); it != LMotores.end(); ++it)
    {
        f << (*it)->Get_ID() << endl;
        //f << (*it)->SHOW() << endl;
    }
}

void Fabrica::Ligar_Motores()
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        list<Motor *>::iterator it;
        for (it = LMotores.begin(); it != LMotores.end(); ++it)
            (*it)->START();
    }
}

void Fabrica::Desligar_Motores()
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        list<Motor *>::iterator it;
        for (it = LMotores.begin(); it != LMotores.end(); ++it)
            (*it)->STOP();
    }
}

User* Fabrica::Pesquisa_User(int id_user)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        list<User *>::iterator it;
        for (it = LUsers.begin(); it != LUsers.end(); ++it)
        {
            if (id_user == (*it)->Get_ID())
                return (*it);
        }
    }
    return NULL;
}

Motor* Fabrica::Pesquisa_Motor(int id_motor)
{
        cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        list<Motor *>::iterator it;
        for (it = LMotores.begin(); it != LMotores.end(); ++it)
        {
            if (id_motor == (*it)->Get_ID())
                return (*it);
        }
    }
    return NULL;
}

void Fabrica::Ligar(int id_motor)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        Motor *M = Pesquisa_Motor(id_motor);
        if (M != NULL)
            M->START();
        else
            cout << "Motor nao existe" << endl;
    }
}

void Fabrica::Desligar(int id_motor)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        Motor *M = Pesquisa_Motor(id_motor);
        if (M != NULL)
            M->STOP();
        else
            cout << "Motor nao existe" << endl;
    }
}

ESTADO_MOTOR Fabrica::Get_Estado(int id_motor)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        Motor *M = Pesquisa_Motor(id_motor);
        if (M != NULL)
            return M->Get_ESTADO();
        else
            cout << "Motor nao existe" << endl;
    }
    //return;
}

list<Motor *> Fabrica::Listar_Tipo(string Tipo, ostream &f)
{
    list<Motor *> lista;
    list<Motor *>::iterator it;
    for (it = LMotores.begin(); it != LMotores.end(); ++it)
    {
        if ((*it)->Get_TIPO().compare(Tipo) == 0)
        {
            f << (*it)->Get_ID() << endl;
        }

    }
    return lista;
}

void Fabrica::ESTOU_QUENTE(Motor *M)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        // Se M ja esta na lista nao deixo inserir
        list<Motor *>::iterator it;
        it = find(LMQuentes.begin(), LMQuentes.end(), M);
        if (it == LMQuentes.end()) // if (it == NULL)
        { // LMQuentes.end() aponta para NULL
            M->STOP();
            LMQuentes.push_back(M);
        }
    }
}

void Fabrica::ESTOU_AVARIADO(Motor *M)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        // Se M ja esta na lista nao deixo inserir
        list<Motor *>::iterator it;
        it = find(LMAvariados.begin(), LMAvariados.end(), M);
        if (it == LMAvariados.end()) // if (it == NULL)
        { // LMAvariados.end() aponta para NULL
            M->STOP();
            M->Set_AVARIA();
            LMAvariados.push_back(M);
        }
    }
}

void Fabrica::RUN()
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoRUN())
        {
            //while(true)
            //{
                list<Motor *>::iterator it;
                for (it = LMotores.begin(); it != LMotores.end(); ++it)
                    (*it)->RUN();
                //cout << "NAvisos-TEMP = " << LMQuentes.size() << endl;
                if (LMQuentes.size() > 0 || LMAvariados.size() > 0)
                    Manutencao();
                Uteis::Delay(1000);
            //}
        }
    }
}

bool Fabrica::Manutencao()
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoMANUTENCAO())
        {
            list<Motor *>::iterator it;
            for (it = LMQuentes.begin(); it != LMQuentes.end(); ++it)
            {
                (*it)->Set_TEMPERATURA(0);
                (*it)->TEMPERATURA_VERDE();
                (*it)->START();
            }
            LMQuentes.clear();
            for (it = LMAvariados.begin(); it != LMAvariados.end(); ++it)
            {
                (*it)->Set_TEMPERATURA(0);
                (*it)->TEMPERATURA_VERDE();
                (*it)->START();
            }
            LMAvariados.clear();
            return true;
        }
    }
    return false;
}

Objeto* Fabrica::Pesquisa_Objeto(list<Objeto *> &obj, string _marca)
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        list<Objeto *>::iterator it;
        for (it = obj.begin(); it != obj.end(); ++it)
        {
            if ((*it)->Get_MARCA().compare(_marca) == 0)
                return (*it);
        }
    }
    return NULL;
}

list<Objeto *> Fabrica::Ranking_Dos_Fracos()
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    list<string> lista;
    list<Objeto *> obj;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoLISTAR())
        {

            list<Objeto *>::iterator ito;
            list<Motor *>::iterator itm;
            Objeto *O;
            int cont = 0;
            for (itm = LMotores.begin(); itm != LMotores.end(); ++itm)
            {
                if (cont == 0)
                {
                    O = new Objeto(-1, (*itm)->Get_MARCA());
                    O->Set_AVARIA_ZERO();
                    obj.push_back(O);
                }
                cont++;
                for (ito = obj.begin(); ito != obj.end(); ++ito)
                {
                    if ((*itm)->Get_MARCA() != (*ito)->Get_MARCA())
                    {
                        O = new Objeto(-1, (*itm)->Get_MARCA());
                        O->Set_AVARIA_ZERO();
                        obj.push_back(O);
                    }

                }
            }
            obj.sort([](Objeto *A, Objeto *B)
            {
                 return A->Get_NUMERO_AVARIA() > B->Get_NUMERO_AVARIA();
            });
        }
    }
    //return lista;
    return obj;
}

list<Motor *> Fabrica::Ranking_Dos_Mais_Trabalhadores()
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    list<Motor *> lista;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoMANUTENCAO())
        {
            lista = LMotores;
            lista.sort([](Motor *A, Motor *B)
            {
                 return A->Get_HORAS_TRABALHO() > B->Get_HORAS_TRABALHO();
            });
        }
    }
    return lista;
}

void Fabrica::Esvaziar_Limpar()
{
    cout << "Passei no metodo <" << __FUNCTION__ << "> na classe Fabrica" << endl;
    if (Ut_Atual_Existe())
    {
        if (Ut_Atual->PossoREMOVER())
        {
            list<User *>::iterator itu;
            list<Motor *>::iterator itm;
            //list<Sensor *>::iterator its;
            for(itu = LUsers.begin(); itu != LUsers.end(); ++itu)
                delete (*itu);
            LUsers.clear();
            for(itm = LMotores.begin(); itm != LMotores.end(); ++itm)
                delete (*itm);
            LMotores.clear();
            for(itm = LMQuentes.begin(); itm != LMQuentes.end(); ++itm)
                delete (*itm);
            LMQuentes.clear();
            for(itm = LMAvariados.begin(); itm != LMAvariados.end(); ++itm)
                delete (*itm);
            LMAvariados.clear();
            /*for(its = LSensores.begin(); its != LSensores.end(); ++its)
                delete (*its);
            LSensores.clear();*/
            //delete [] POS_MOTORES; // ???
            //delete [] POS_MOTORES; // ???
        }
    }
}
